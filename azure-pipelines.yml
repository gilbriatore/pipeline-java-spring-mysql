trigger:
  branches:
    include:
      - docker

variables:
  imageName: 'azspring-app'
  containerRegistry: 'devopsacrpucpr.azurecr.io'
  dockerTag: '$(Build.BuildId)'
  resourceGroup: 'devops_1semestre'
  containerAppName: 'azspring'
  acrName: 'devopsacrpucpr'

stages:

  - stage: Test
    displayName: "Test Stage"
    jobs:
      - job: Test
        displayName: "Run Unit and Integration Tests"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - script: |
              echo "Verificando versões do Docker e Maven..."
              docker --version
              mvn -version
            displayName: 'Check Docker and Maven versions'

          - script: |
              echo "Executando testes com Testcontainers..."
              mvn verify
            displayName: 'Run Tests with Testcontainers'

          - task: PublishTestResults@2
            displayName: 'Publicar resultados de testes'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              failTaskOnFailedTests: true

  - stage: BuildAndPush
    displayName: "Build and Push Docker Image"
    dependsOn: Test
    condition: succeeded()
    jobs:
      - job: Build
        displayName: "Build and Push Job"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: Maven@4
            displayName: 'Package Application'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package -DskipTests'

          - script: |
              echo "Construindo a imagem Docker..."
              docker build -t $(containerRegistry)/$(imageName):$(dockerTag) .
            displayName: 'Docker Build'

          - task: Docker@2
            displayName: 'Push image to ACR'
            inputs:
              command: 'push'
              repository: '$(imageName)'
              tags: '$(dockerTag)'
              containerRegistry: 'MyACRServiceConnection'

  - stage: Deploy
    displayName: "Deploy Stage"
    dependsOn: BuildAndPush
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: "Deploy to Azure Container App"
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureCLI@2
            displayName: 'Ativar Identidade Gerenciada no Container App'
            inputs:
              azureSubscription: 'MyRMServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Ativando Identidade Gerenciada no Container App..."
                az containerapp identity assign \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup)

          - task: AzureCLI@2
            displayName: 'Conceder permissão AcrPull para Container App'
            inputs:
              azureSubscription: 'MyRMServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Obtendo o principalId da Identidade Gerenciada..."
                PRINCIPAL_ID=$(az containerapp show \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup) \
                  --query identity.principalId \
                  --output tsv)

                echo "Obtendo o ID do ACR..."
                ACR_ID=$(az acr show \
                  --name $(acrName) \
                  --resource-group $(resourceGroup) \
                  --query id \
                  --output tsv)

                echo "Atribuindo permissão AcrPull..."
                az role assignment create \
                  --assignee $PRINCIPAL_ID \
                  --scope $ACR_ID \
                  --role AcrPull

          - task: AzureCLI@2
            displayName: 'Deploy to Azure Container App'
            inputs:
              azureSubscription: 'MyRMServiceConnection'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Realizando deploy para Azure Container App..."
                az containerapp update \
                  --name $(containerAppName) \
                  --resource-group $(resourceGroup) \
                  --image $(containerRegistry)/$(imageName):$(dockerTag)
